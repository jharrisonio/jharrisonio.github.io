"use strict";(self.webpackChunklearnings=self.webpackChunklearnings||[]).push([[596],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||i;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=l;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},4982:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return l}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),c=["components"],a={sidebar_position:1},s="VS Code Extension Architecture",u={unversionedId:"vscode/vscode-architecture",id:"vscode/vscode-architecture",title:"VS Code Extension Architecture",description:"Updating a View when a Custom Editor is opened",source:"@site/docs/vscode/vscode-architecture.md",sourceDirName:"vscode",slug:"/vscode/vscode-architecture",permalink:"/docs/vscode/vscode-architecture",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vscode/vscode-architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Typescript Compiler Recipes",permalink:"/docs/typescript/ts-compiler-recipes"},next:{title:"Typescript Compiler Recipes",permalink:"/docs/vscode/vscode-extensions"}},p=[{value:"Updating a View when a Custom Editor is opened",id:"updating-a-view-when-a-custom-editor-is-opened",children:[],level:2}],d={toc:p};function l(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vs-code-extension-architecture"},"VS Code Extension Architecture"),(0,i.kt)("h2",{id:"updating-a-view-when-a-custom-editor-is-opened"},"Updating a View when a Custom Editor is opened"),(0,i.kt)("p",null,"When a normal ",(0,i.kt)("inlineCode",{parentName:"p"},"TextEditor")," is opened, it is possible to listen to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onDidChangeActiveTextEditor")," event and receive the active editor as a parameter. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"vscode.window.onDidChangeActiveTextEditor(editor => {\n    const { document } = editor;\n    console.log(document.getText()); // logs file contents\n    console.log(document.language);  // logs language, e.g. 'typescript'\n});\n")),(0,i.kt)("p",null,"When using a ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomTextEditorProvider")," however, the ",(0,i.kt)("inlineCode",{parentName:"p"},"editor")," argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," even though it is still based on a text model."),(0,i.kt)("p",null,"So, how do you retrieve the contents of the currently active file?"))}l.isMDXComponent=!0}}]);