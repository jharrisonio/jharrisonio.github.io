"use strict";(self.webpackChunklearnings=self.webpackChunklearnings||[]).push([[1504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,b=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},o="NX Basics",l={unversionedId:"nx/nx-basics",id:"nx/nx-basics",title:"NX Basics",description:"This page documents how to use the NX CLI tool for generating workspaces, apps and plugins.",source:"@site/solutions/nx/nx-basics.md",sourceDirName:"nx",slug:"/nx/nx-basics",permalink:"/solutions/nx/nx-basics",draft:!1,editUrl:"https://github.com/jharrisonio/jharrisonio.github.io/tree/master/solutions/nx/nx-basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Minimal Typescript Server",permalink:"/solutions/js-ts/minimal-ts-server"},next:{title:"NX Plugin Development",permalink:"/solutions/nx/nx-plugin-development"}},p={},s=[{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Generate the workspace",id:"generate-the-workspace",level:3},{value:"Adding an app to the workspace",id:"adding-an-app-to-the-workspace",level:3},{value:"Building an app",id:"building-an-app",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nx-basics"},"NX Basics"),(0,a.kt)("p",null,'This page documents how to use the NX CLI tool for generating workspaces, apps and plugins.\nA sample project will be created called "Vast".'),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://nx.dev/"},"NX CLI"))),(0,a.kt)("h3",{id:"generate-the-workspace"},"Generate the workspace"),(0,a.kt)("p",null,"Call the create-nx-workspace CLI tool, give it a name and cd into the folder.\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ npx create-nx-workspace@latest nx-test-workspace --preset=ts --nxCloud=false --packageManager=yarn && cd nx-test-workspace"),"  "),(0,a.kt)("h3",{id:"adding-an-app-to-the-workspace"},"Adding an app to the workspace"),(0,a.kt)("p",null,"NX plugins are installed via NPM. A list of community plugins can be found ",(0,a.kt)("a",{parentName:"p",href:"https://nx.dev/community#create-nx-plugin"},"here"),".",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ npm i -D @nrwl/node"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ yarn add -D @nrwl/node")),(0,a.kt)("p",null,"Once installed, plugins can be called via the nx CLI tool.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ nx g @nrwl/node:app my-app")),(0,a.kt)("p",null,"Libraries can also be generated:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ nx g @nrwl/js:lib my-lib")),(0,a.kt)("p",null,"And they can be publishable:\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ nx g @nrwl/js:lib mylib --publishable --importPath=@myorg/mylib")),(0,a.kt)("h3",{id:"building-an-app"},"Building an app"),(0,a.kt)("p",null,"Apps can be built by running this command from the monorepo root:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"$ nx run myapp:build")),(0,a.kt)("p",null,"All built files are put into the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder in the root of the monorepo."))}u.isMDXComponent=!0}}]);