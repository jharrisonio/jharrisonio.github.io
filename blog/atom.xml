<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jharrison.io/blog</id>
    <title>jharrison.io Blog</title>
    <updated>2022-10-25T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jharrison.io/blog"/>
    <subtitle>jharrison.io Blog</subtitle>
    <icon>https://jharrison.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Programmatically managing Prisma models]]></title>
        <id>2022-10-25-programmatically-managing-prisma-models</id>
        <link href="https://jharrison.io/blog/2022-10-25-programmatically-managing-prisma-models"/>
        <updated>2022-10-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I've woken up early this morning because I'm excited to try out something I found yesterday; a library for manipulating the Prisma schema file via code.]]></summary>
        <content type="html"><![CDATA[<p>I've woken up early this morning because I'm excited to try out something I found yesterday; a library for manipulating the Prisma schema file via code.</p><p>Why is this exciting? I'm working on a side project to automate the entire build of a web app, and that includes creating, modifying and deleting data models using Prisma. But it needs to be done programmatically. Usually I would use the <a href="/solutions/js-ts/ts-compiler">Typescript Compiler</a> to read the AST and manipulate it that way, but the Prisma schema file isn't Typescript, or Javascript. It's a proprietary format, which rules out this option.</p><p>Prisma has an <a href="https://github.com/prisma/prisma/tree/main/packages/internals" target="_blank" rel="noopener noreferrer">internals</a> library which has some functionality for this, but it's undocumented and looks difficult to work with. There's also a third party lib called <a href="https://github.com/MrLeebo/prisma-ast" target="_blank" rel="noopener noreferrer">prisma-ast</a>. Let's explore both these options.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prisma-internals">Prisma Internals<a class="hash-link" href="#prisma-internals" title="Direct link to heading">​</a></h2><p>Digging through the Prisma NPM package I found the Internals library. It seems it has a whole lot of random utils in there, so it's a bit hard to find the part that's used for modifying the Schema file. Searching via the Github website is too hard so I'm going to clone the repo and open it up in VSCode.</p><p>I believe I found something at <a href="https://github.com/prisma/prisma/blob/main/packages/internals/src/engine-commands/getDmmf.ts" target="_blank" rel="noopener noreferrer"><code>getDmmf.ts</code></a> but it's a little hard to tell. I remember there's a Prisma CLI command to pull a models from an existing database and add it your schema file. See <a href="https://www.prisma.io/docs/reference/api-reference/command-reference#db-pull" target="_blank" rel="noopener noreferrer"><code>prisma db pull</code></a>. The <code>prisma db push</code> command would also need to read the schema file in order to convert it to SQL scripts. I'll look for the code behind these commands and work my way deeper.</p><p>This leads me to a file called <a href="https://github.com/prisma/prisma/blob/main/packages/migrate/src/commands/DbPull.ts" target="_blank" rel="noopener noreferrer"><code>DbPull.ts</code></a>. It has a bunch of imports from that <code>internals</code> lib I mentioned before:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  checkUnsupportedDataProxy</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Command</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createSpinner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  drawBox</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  format</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  formatms</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  getCommandWithExecutor</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  getConfig</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  getSchema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  getSchemaPath</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  HelpError</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IntrospectionEngine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IntrospectionSchemaVersion</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IntrospectionWarnings</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  link</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  loadEnvFile</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  protocolToConnectorType</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@prisma/internals"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I can't see anything in that list of imports that looks like it would generate a model though. Time to go deeper down the rabbit hole.</p><p>There's a function called <a href="https://github.com/prisma/prisma/blob/d45a386158438a2fb8d8af9f8acfb6f35fc1b703/packages/migrate/src/commands/DbPull.ts#L87" target="_blank" rel="noopener noreferrer"><code>parse</code></a> which seems to do a lot. Including calling one of those imported functions called <a href="https://github.com/prisma/prisma/blob/d45a386158438a2fb8d8af9f8acfb6f35fc1b703/packages/migrate/src/commands/DbPull.ts#L197" target="_blank" rel="noopener noreferrer"><code>getConfig</code></a>. But on closer inspection that function doesn't return the right type of data to be useful. Let's keep going.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prisma-engines">Prisma Engines<a class="hash-link" href="#prisma-engines" title="Direct link to heading">​</a></h2><p>Here's something interesting on <a href="https://github.com/prisma/prisma/blob/d45a386158438a2fb8d8af9f8acfb6f35fc1b703/packages/migrate/src/commands/DbPull.ts#L232" target="_blank" rel="noopener noreferrer">line 232</a>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> introspectionResult </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">introspect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  schema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"--force"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"--composite-type-depth"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">introspectionSchema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> introspectionResult</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">datamodel</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">introspectionWarnings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> introspectionResult</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">warnings</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">introspectionSchemaVersion </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> introspectionResult</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">version</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It appears the <code>engine.introspect()</code> function reads the datasource config from the schema file and returns a <code>datamodel</code> based on the database. This is what I'm looking for. But the <code>introspect()</code> seems to just be a wrapper for another function:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getRPCPayload</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"introspect"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> schema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> force</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compositeTypeDepth </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I'm not very familiar with RPC so I'l have to do some reading to figure out where this actually goes. I'll do a whole-project search for "RPC" in all <code>*.ts</code> files to see if I can find the handler. No luck. But I did find some more specific RPC message names, like "getDatabaseDescription". I'll try another search for that and see what I find.</p><p>OK I think I understand how this works. Looks like a separate process is spawned and the JSON data is piped into that process using <code>stdin</code>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">child</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stdin</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">destroyed</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Can't execute </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation constant" style="color:#36acaa">JSON</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation function" style="color:#d73a49">stringify</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">      request</span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">    </span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"> because introspection engine is destroyed.</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">debugRpc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"SENDING RPC CALL"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">child</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stdin</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let's see what <code>this.child</code> is doing. Bad news. It's running a binary file, like an exe or shell script. I can't see these binaries in the repo but they probably need to be built. I'm going to try and build the project to see if they get generated. Then maybe I can figure out how they're generated. </p><p>I didn't find how the engines are generated, but I did find some code that pointed me to <a href="https://www.prisma.io/docs/concepts/components/prisma-engines" target="_blank" rel="noopener noreferrer">useful documentation</a>. I'm getting a much better idea of how Prisma works now. There are engines (binary executables) for each type of database. They're implemented in <a href="https://www.rust-lang.org/" target="_blank" rel="noopener noreferrer">Rust</a>. I'm going to give up on this avenue. I don't need to see inside the binaries, I just need to read what they output. There must be a TS wrapper somewhere. I'll go back to the <code>engine.introspect()</code> function.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-dead-end-or-a-new-perspective">A dead end or a new perspective?<a class="hash-link" href="#a-dead-end-or-a-new-perspective" title="Direct link to heading">​</a></h2><p>After going back it looks like the Rust engine is responsible for converting the database structure into Prisma models. All it outputs is a string, which gets appended to <code>schema.prisma</code>. </p><p>Let me just recap my goal for my own sake...my head is still stuck in the deep dive.</p><blockquote><p>Programmatically read/write/update the <code>schema.prisma</code> file</p></blockquote><p>I assumed I would do that by directly manipulating the file, and <em>then</em> apply the changes to the DB. This isn't possible with the path I've gone down. But flipping this on it's head, I could manipulate the <em>database</em> (using simple SQL scripts) and <em>retrospectively</em> update the schema file. </p><p>To be honest I hadn't even thought of doing that, and it might make sense. I'm out of time today, but I'm happy that I've still got 2 options:</p><ol><li>Modify the DB, then update the Schema</li><li>Use the <a href="https://github.com/MrLeebo/prisma-ast" target="_blank" rel="noopener noreferrer">prisma-ast</a> library</li></ol>]]></content>
        <author>
            <name>James Harrison</name>
            <uri>https://jharrison.io</uri>
        </author>
        <category label="live" term="live"/>
        <category label="prisma" term="prisma"/>
        <category label="ast" term="ast"/>
        <category label="schema" term="schema"/>
        <category label="database" term="database"/>
        <category label="typescript" term="typescript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing a cold outreach email]]></title>
        <id>2022-10-24-writing-cold-outreach-email</id>
        <link href="https://jharrison.io/blog/2022-10-24-writing-cold-outreach-email"/>
        <updated>2022-10-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today I'm looking at something non-technical! How to write a good email. Specifically how to write an email to a prospective customer to get them interested in my product.]]></summary>
        <content type="html"><![CDATA[<p>Today I'm looking at something non-technical! How to write a good email. Specifically how to write an email to a prospective customer to get them interested in my product. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-i-already-know">What I already know<a class="hash-link" href="#what-i-already-know" title="Direct link to heading">​</a></h2><p>I've read a lot about pitching and selling in the past, but unless you're doing it every day the details can get a bit foggy. I'm going to start by refreshing my memory of things I've read before.</p><p><a href="https://www.goodreads.com/book/show/10321016-pitch-anything" target="_blank" rel="noopener noreferrer">Pitch Anything by Oren Klaff</a>
This book introduces a technique called the STRONG method.</p><p>S = Set the Frame
T = Tell the Story
R = Reveal the Intrigue
O = Offer the Prize
N = Nail the Hook-Point
G = Get the Deal</p><p>It revolves more around pitch meetings rather than emails. I'll consider these concepts but continue looking for others</p><p><a href="https://www.gong.io/blog/cold-email-stats/" target="_blank" rel="noopener noreferrer">Cold Email Statistics by Gong</a>
I really like the summaries that Gong provide based on the data they collect form their sales platform. Here are the key takeaways from this article:</p><ol><li>Send longer emails (4+ sentences are 15x more likely to book a meeting). 30 - 150 words</li><li>Make it personalized, direct and intentional in every sentence</li><li>Don't talk about ROI (-15% success rate)</li><li>Use the "interest CTA". There are 3 types of CTAs, the "interest" one performs best at 30%</li><li>Don't ask for thoughts (-20%)</li><li>Don't guilt them (saying "I never hear back..."). I wouldn't do this anyway</li><li>Use a "nicety". Saying "hope all is well" actually increases success by 24%</li></ol><p>They also have some great <a href="https://www.gong.io/content/cold-email-templates/" target="_blank" rel="noopener noreferrer">cold email templates</a> and <a href="https://www.gong.io/wp-content/uploads/2021/01/3-43-Highly-Effective-Email-CTAs.pdf" target="_blank" rel="noopener noreferrer">highly effective email CTAs</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-research">Further research<a class="hash-link" href="#further-research" title="Direct link to heading">​</a></h2><p>I really like the Gong email templates but I want to see if there are some other ones out there on the web. A quick Google search for "cold email templates" gives me a few good ones:</p><ul><li><a href="https://elasticsales.com/cold-email-templates/" target="_blank" rel="noopener noreferrer">7 Best cold Email Templates for Effective Sales Outreach</a></li><li><a href="https://mailshake.com/blog/cold-email-templates/" target="_blank" rel="noopener noreferrer">15 Cold Email Templates to Generate More Leads</a></li><li><a href="https://www.linkedin.com/pulse/how-write-cold-email-best-practices-5-templates-" target="_blank" rel="noopener noreferrer">How to write cold email best practices</a></li></ul><p>Flicking through the results above I like the following forumlas.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="aida-attention-interest-desire-action">AIDA (attention-interest-desire-action)<a class="hash-link" href="#aida-attention-interest-desire-action" title="Direct link to heading">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Hi {{name}},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">What would you do with an extra 10 hours each week?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I ask because clients like yourself have seen savings like these – if not more – after adding our software to their tech stacks.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Just ask experts like Gary Vaynerchuk, Tim Ferriss, and Malcolm Gladwell, who we’re happy to count as satisfied customers.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I’d love to set up a time to walk you through a personalized demo. Would you have some free time next week to connect?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mention-a-competitors-product">Mention a competitor's product<a class="hash-link" href="#mention-a-competitors-product" title="Direct link to heading">​</a></h3><p>In my case it wouldn't be a competitor, but a piece of software or a tool. </p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Hi {{Name}},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Just ran across your website and noticed you were using {{Your competitor’s product}}. How are you liking it? I run a {{service}} called {{your company}}.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">It’s just like {{your competitor’s product}}, only {{key differentiator}}. If you’re up for it, I would love to jump on a quick call with you and get your opinion on how we could make {{prospect’s company}} better (and see if it would make sense for us to work together).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Would {{date and time}} be a good time for you? (If not, I’m flexible, just let me know).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>Here are the things I like the most out of all this research:</p><ol><li>More than 4 sentences but less than 150 words</li><li>Make it personal - introduce myself, add something specific about their business</li><li>Mention they are using X technology (or any other info I can find about the company)</li><li>If they are in my area, mention I am nearby</li><li>Add a nicety</li><li>Finish with a question, "Would you be interested.." or "Should we discuss this in more detail.."?</li></ol><p>I finished the new template and sent it to the first 100 contacts. Let's wait and see how it performs when A/B tested against the old one.</p>]]></content>
        <author>
            <name>James Harrison</name>
            <uri>https://jharrison.io</uri>
        </author>
        <category label="live" term="live"/>
        <category label="apollo" term="apollo"/>
        <category label="outreach" term="outreach"/>
        <category label="email" term="email"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing an NX plugin for automating Nest and Prisma]]></title>
        <id>2022-10-23-nx-plugin-nest-prisma</id>
        <link href="https://jharrison.io/blog/2022-10-23-nx-plugin-nest-prisma"/>
        <updated>2022-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm about to resume working on a side project, a tool that helps developers build things faster. Before I start coding I feel I need to revisit the philosophy behind this tool and just get some clarification for myself. Sometimes it's really easy to get lost in the implementation and forget what you're actually building.]]></summary>
        <content type="html"><![CDATA[<p>I'm about to resume working on a side project, a tool that helps developers build things faster. Before I start coding I feel I need to revisit the philosophy behind this tool and just get some clarification for myself. Sometimes it's really easy to get lost in the implementation and forget what you're actually building.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-vision">The vision<a class="hash-link" href="#the-vision" title="Direct link to heading">​</a></h2><p>The guiding vision stems from my low-code experience. I've seen the incredible benefits this technology can bring. Unprecedented speed, baked-in quality control and as much automation as possible. I've also seen the lack of enthusiasm from developers who are used to writing code. The visual drag-and-drop interface is just so far removed from what they are used to that it creates a huge barrier. Another issue is accessibility. The good low-code platforms all cost a fortune, create vendor lock-in and hide away the details.</p><p>While my ultimate goal is to create a full-scale, full-stack platform - eventually - I recognize that I have to start small and gradually build up functionality. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-goal">The goal<a class="hash-link" href="#the-goal" title="Direct link to heading">​</a></h2><p>The goal is simple; create a way of developing web apps that is faster, better and easier than the current status quo.</p><p>For me that means looking at past projects and replaying them, looking at how each phase could have been done better.</p><p><strong>Planning</strong>
This is often a phase that represents duplicate effort. Architects write up specs in a wiki which a developer then has to bring to life. What if you could do both these things in a single step? What if the specs became the app?</p><p><strong>Coding</strong>
Just the physical act of typing everything out verbose is very time consuming. Why are we still coding the same way we were 20 years ago? Surely there's got to be a faster way, and I don't think the answer is AI like Github Copilot. These tools just write more code, they don't remove the need for coding. </p><p><strong>Features</strong>
Even when using frameworks and pre-built libraries, we find ourselves re-creating things over and over again. Authentication, error handling, logging, roles &amp; permissions are a few. Features like a basic CMS, notifications, case management, payments, user profiles are others that seem to get re-built for every project when there is very little difference. </p><p>I've decided to start in the middle, the Coding phase, and spread out both ways from there.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-hypothesis">The hypothesis<a class="hash-link" href="#the-hypothesis" title="Direct link to heading">​</a></h2><p>Frameworks like NestJS and Ruby on Rails provide wrappers around standard languages that means we have to write less code to achieve our goals. But they are still pretty verbose, and we are still writing code in a text editor.
They provide more flexibility than is needed. My hypothesis is that 90% of use cases could be satisfied with a highly opinionated language that sacrifices flexibility for speed, quality and automation. And this language should be able to be presented in a variety of user interfaces. Perhaps text-based, perhaps visual. </p><p>There are a finite amount of commands needed to build an application. Here's a quick list off the top of my head:</p><ol><li>Create a workspace (project)</li><li>Create an application</li><li>Define a data model</li><li>Expose a REST endpoint</li><li>Integrate with third parties</li><li>Expose a GraphQL service</li><li>Dispatch events over websockets</li></ol><p>While building logic, these are the key operations needed:</p><ol><li>Defining/setting variables</li><li>Loops</li><li>Conditions</li><li>Calling functions</li><li>Raising/handling errors</li></ol><p>I'm sure I've missed some, but this is enough to get the gist. Almost everything programmers do, regardless of the language falls into one of those categories. In Javascript, how many ways can you write a loop? Too many. Sure, they all have their benefits but the sheer verbosity of it surely outweighs the benefits for most use cases.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-method">The method<a class="hash-link" href="#the-method" title="Direct link to heading">​</a></h2><p>Instead of jumping straight into a user interface I'm going to build an API that can be used to build an entire application from start to finish. This can be called from a CLI for a start, to have it act on a local project. I'm going to make use of a few tools and frameworks that have already done a lot of work to automate things:</p><p><strong>nx.dev</strong> for managing a monorepo. It offers really smart dependency management, including sharing them across apps and performing impact analysis (only build what changed). It also offers a really good schematics library that lets me write code generators that can even analyse the Abstract Syntax Tree (AST) of a file and apply manipulations programmatically. Simply put, it allows me to <em>modify</em> files, not just generate them from templates.</p><p><strong>NestJS + Prisma</strong> for the actual underlying codebase. It's an easy framework to learn and provides the necessary abstraction on top of REST, GraphQL, Websockets and Microservices that I would have to write myself if I didn't use it. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="current-progress">Current progress<a class="hash-link" href="#current-progress" title="Direct link to heading">​</a></h2><p>I'm at the stage where I can create a monorepo using nx.dev, spin up a microservice, rename/delete etc. I'm working on getting Prisma initialised in the NestJS microservice. At first glance the command <code>prisma init</code> just creates a couple of files but I wonder if there's more to it than that. Perhaps I can just create these files as templates and copy them into the microservice, or perhaps I actually need to run <code>prisma init</code> on the microservice.</p><p>Let's try the first method and see if it works.</p><p>The current CLI is called by typing <code>$ vast-cli &lt;command&gt; [options]</code><br>
<!-- -->I set up an alias so I can call it with the command <code>vc</code></p><p><code>$ vc ws new workspace-1</code><br>
<!-- -->Creates a workspace (ws is an alias for workspace)</p><p><code>$ vc ms new microservice-1</code><br>
<!-- -->Creates a new NestJS microservice inside the workspace.</p><img loading="lazy" src="/assets/images/Screen Shot 2022-10-23 at 3.28.57 pm-ec9143510bca42fa48fb72745d0dfb33.png" class="img_ev3q">Looks pretty good! Although I stupidly called the file `prisma.schema` instead of `schema.prisma`. I'll manually rename that for now because re-building everything isn't the fastest process. Then I'll try and run the microservice.<p>By default the microservice listens on 3000. Will need to change that. But overall the microservice boots ok without errors. Get Prisma running involves a few more steps:</p><ol><li>Add a default model</li><li>Dynamically generate the prisma client with <code>npm install @prisma/client</code> and <code>prisma generate</code></li><li>Creating a Prisma service inside NestJS</li></ol><p>Let's check if there's an existing NX.dev plugin for doing all this. Or perhaps a NestJS schematic.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementing-the-nestjs--prisma-schematic">Implementing the NestJS + Prisma schematic<a class="hash-link" href="#implementing-the-nestjs--prisma-schematic" title="Direct link to heading">​</a></h2><p>I found an existing schematic that seems decent at <a href="https://github.com/notiz-dev/nestjs-prisma" target="_blank" rel="noopener noreferrer">notiz-dev/nestjs-prisma</a>. To get this up and running I think I'll have to do the following steps:</p><ol><li>Add <code>nestjs-prisma</code> to the microservice's default dependencies</li><li>Add <code>@prisma/client</code> to the dependencies too</li><li>Add <code>PrismaModule</code> to the imports section of <code>AppModule</code></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-potential-problem">A potential problem<a class="hash-link" href="#a-potential-problem" title="Direct link to heading">​</a></h2><p>I realise my CLI is a wrapper around the <code>nx</code> CLI which is a wrapper around the <code>nest</code> CLI which is a wrapper around the <code>ng</code> (Angular) schematics CLI. Is there benefit in preserving this chain or should I try and cut out some middlemen? I remember reading somewhere that by using NX, it understands what's changed in your project and can build it faster. Probably worth validating that before continuing.</p><p>It looks like NX provides some smart caching around running tasks, but I don't know if that will apply for my scenario. I can't see any benefit of using NX instead of the NestJS CLi directly. That being said it's kind of nice to use a single tool instead of switching tools depending on context. I'm going to proceed using NX for most things until I hit an issue.</p><p>Back to Prisma...</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="improving-the-build-process">Improving the build process<a class="hash-link" href="#improving-the-build-process" title="Direct link to heading">​</a></h2><p>I've made the changes above and in the process I also improved the build/publish process to be faster and completed with a single command. Instead of building/publishing 3 projects separately, I can do it in 1. Before it worked like this:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn nx publish nx-workspace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn nx publish nx-microservice</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn nx publish vast-cli</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, I added <a href="https://nx.dev/reference/project-configuration#implicitdependencies" target="_blank" rel="noopener noreferrer">implicit dependencies</a> to <code>vast-cli/project.json</code> and change the <code>publish</code> task to have <a href="https://nx.dev/reference/project-configuration#dependson" target="_blank" rel="noopener noreferrer">dependsOn</a> all 'publish' tasks of its dependencies. This can be achieved with the <code>^</code> character:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"publish"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token property" style="color:#36acaa">"dependsOn"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"^publish"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bump"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"build"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-microservice-with-a-database">A microservice with a database<a class="hash-link" href="#a-microservice-with-a-database" title="Direct link to heading">​</a></h2><p>Hopefully with the new <code>nestjs-prisma</code> schematic installed, I can start using Prisma immediately in my microservice. Let's try it out.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ vc ws new workspace-1 &amp;&amp; cd workspace-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ vc ms new microservice-1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><img loading="lazy" src="/assets/images/Screen Shot 2022-10-23 at 4.53.18 pm-7cd018cb494ff0962b2717cda4110132.png" class="img_ev3q">Well...something went wrong. The error logged looked like this:<p><code>error Couldn't find any versions for "nestjs-prisma" that matches "^4.5.0"</code></p><p>I was trying to install the schematic with the same version as Prisma, which obviously isn't going to work. Let me update my dependency list and republish.</p><p>Success! Next up:</p><ol><li>Automate the creation/manipulation of Prisma models (and run <code>prisma generate</code>)</li><li>Automate the deployment of the microservice (<code>nx serve &amp;&amp; prisma migrate</code>)</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="generating-models">Generating models<a class="hash-link" href="#generating-models" title="Direct link to heading">​</a></h2><p>I need to check if there's a CLI tool or schematic that already exists for generating models. Perhaps in Nest or Prisma itself. Doesn't look like it. Let's get to work.</p><p>A new NX generator needs to be created in my <code>nx-microservice</code> plugin. First I need to get my head around the plugin/generator structure because it still confuses me.</p><p>The problem is with the namespacing of plugins. It's hard to have a plugin work with more than 1 type of object because you need 1 generator per action (create, rename, update, etc). For example:</p><p>Plugin = @vast/nx-microservice<br>
<!-- -->Generator = app (create a new app)<br>
<code>nx g @vast/nx-microservice:app</code></p><p>If I wanted to add a function to rename the microservice, I could do this:
<code>nx g @vast/nx-microservice:rename</code></p><p>But then I can't have a generator to rename a data model, or a service in the future. This leaves 2 possible options:</p><ol><li>Prefix generator names with colons (e.g. <code>app:rename</code> and <code>model:rename</code>)</li><li>Create a single plugin for each type of object (e.g. <code>nx-microservice</code>, <code>nx-model</code>, <code>nx-service</code>, etc)</li></ol><p>I think I'll try the first option and see if it's viable.
Generate a new generator:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn nx g @nrwl/nx-plugin:generator model</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn nx g @nrwl/nx-plugin:generator model:remove</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><img loading="lazy" src="/assets/images/Screen Shot 2022-10-23 at 5.47.13 pm-79fde4f4180e62423fdcd0b1927282e1.png" class="img_ev3q">Looks like it doesn't like the colon in the generator name. Using an underscore works though. This means I could potentially put everything into a single plugin, which would be much neater. Let's see what it might look like...<p>Plugin: <code>nx-vast</code>
Generators:  </p><table><thead><tr><th>Generator</th><th>Description</th></tr></thead><tbody><tr><td><code>preset</code></td><td>Workspace preset, with with all template files and logic for getting set up.</td></tr><tr><td><code>microservice</code></td><td>Create a new microservice</td></tr><tr><td><code>microservice_move</code></td><td>Rename a microservice (actually handled by <code>@nrwl/workspace:move</code>)</td></tr><tr><td><code>microservice_remove</code></td><td>Delete a microservice (actually handled by <code>@nrwl/workspace:remove</code>)</td></tr><tr><td><code>model</code></td><td>Create a new Prisma model</td></tr><tr><td><code>model_move</code></td><td>Rename a model</td></tr><tr><td><code>model_remove</code></td><td>Delete a model (and run impact analysis)</td></tr><tr><td><code>model_change</code></td><td>Update the definition of a model</td></tr><tr><td>etc...</td><td></td></tr></tbody></table><p> This structure looks OK, it will get big but manageable. There will be some benefits in terms of shared code. It will require some refactoring of the CLI. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrap-up">Wrap up<a class="hash-link" href="#wrap-up" title="Direct link to heading">​</a></h2><p> I've run out of time today, but I'm happy with the progress. I've also found the blogging process to be helpful, it forces me to think things through before actioning them. </p><ol><li>Got Prisma schematics installed and working with the Microservice generator</li><li>Improved the publishing process to be completed in a single command</li><li>Merged <code>nx-workspace</code> and <code>nx-microservice</code> plugins into a single library called <code>nx-vast</code></li></ol><p> Still to do:</p><ol><li>Write the generators to create a new data model</li><li>Figure out how to properly refactor the entire app if a data model changes name</li><li>Figure out what to do with breaking changes, i.e a data model is deleted and other functions are broken.</li></ol><p> For the last piece, perhaps I could build an API that returned typescript errors. For another day...</p>]]></content>
        <author>
            <name>James Harrison</name>
            <uri>https://jharrison.io</uri>
        </author>
        <category label="live" term="live"/>
        <category label="nx.dev" term="nx.dev"/>
        <category label="nestjs" term="nestjs"/>
        <category label="prisma" term="prisma"/>
        <category label="angular" term="angular"/>
        <category label="schematics" term="schematics"/>
    </entry>
</feed>